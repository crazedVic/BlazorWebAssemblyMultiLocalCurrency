@page "/products"
@using BlazorHelloWorld.Client.Services
@using BlazorHelloWorld.Shared.Services
@using BlazorHelloWorld.Shared.Models
@using Microsoft.Extensions.Localization
@inject IProductService ProductService
@inject ICurrencyService CurrencyService
@inject ILocalizationService LocalizationService
@inject ICategoryService CategoryService
@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime
@implements IDisposable

<style>
    [class^="price-change-"] {
        animation: price-flash 0.5s ease-in-out;
    }

    @@keyframes price-flash {
        0% {
            font-weight: bold;
            font-size: calc(1em + 0.2pt);
            color: #0d6efd;
        }
        100% {
            font-weight: normal;
            font-size: 1em;
            color: inherit;
        }
    }

    .price {
        font-weight: normal;
        font-size: 1em;
    }

    .price.animate {
        animation: price-flash 0.5s ease-in-out;
    }
</style>

<PageTitle>@Localizer["Products"]</PageTitle>

<h1>@Localizer["Products"]</h1>

<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>@Localizer["Name"]</th>
                <th>@Localizer["Category"]</th>
                <th>@Localizer["Price"] (List)</th>
                <th>@Localizer["Price"] (Local)</th>
                <th>@Localizer["Stock"]</th>
                <th>@Localizer["Unit"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in _products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@(product.Translations.GetValueOrDefault(LocalizationService.CurrentLanguage)?.Name ?? product.Translations.GetValueOrDefault("en")?.Name ?? string.Empty)</td>
                    <td>
                        @if (_categoryTranslations.TryGetValue(product.Id, out var category))
                        {
                            @category
                        }
                        else
                        {
                            <span>Loading...</span>
                        }
                    </td>
                    <td>
                        @if (_listPrices.TryGetValue(product.Id, out var listPrice))
                        {
                            @listPrice
                        }
                        else
                        {
                            <span>Loading...</span>
                        }
                    </td>
                    <td>
                        @if (_localPrices.TryGetValue(product.Id, out var localPrice))
                        {
                            <span class="price" id="@($"price-{product.Id}")">@localPrice</span>
                        }
                        else
                        {
                            <span>Loading...</span>
                        }
                    </td>
                    <td>@product.StockQuantity</td>
                    <td>@(product.Translations.GetValueOrDefault(LocalizationService.CurrentLanguage)?.Unit ?? product.Translations.GetValueOrDefault("en")?.Unit ?? string.Empty)</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<ProductTranslationItem> _products = new();
    private Dictionary<string, string> _categoryTranslations = new();
    private Dictionary<string, string> _listPrices = new();
    private Dictionary<string, string> _localPrices = new();

    protected override async Task OnInitializedAsync()
    {
        var translations = await ProductService.GetProducts();
        _products = translations.Products;
        LocalizationService.LanguageChanged += OnLanguageChanged;
        CurrencyService.CurrencyChanged += OnCurrencyChanged;
        await LoadCategoryTranslations();
        await LoadPrices();
    }

    public void Dispose()
    {
        LocalizationService.LanguageChanged -= OnLanguageChanged;
        CurrencyService.CurrencyChanged -= OnCurrencyChanged;
    }

    private async Task LoadPrices()
    {
        _listPrices.Clear();
        _localPrices.Clear();
        foreach (var product in _products)
        {
            _listPrices[product.Id] = await GetListPrice(product);
            _localPrices[product.Id] = await GetLocalPrice(product);
            StateHasChanged();
        }
    }

    private async Task<string> GetLocalPrice(ProductTranslationItem product)
    {
        var convertedPrice = await CurrencyService.ConvertPrice(product.Price, product.BaseCurrency, CurrencyService.CurrentCurrency);
        return await CurrencyService.FormatPrice(convertedPrice, CurrencyService.CurrentCurrency);
    }

    private async Task<string> GetListPrice(ProductTranslationItem product)
    {
        return await CurrencyService.FormatPrice(product.Price, product.BaseCurrency);
    }

    private async Task LoadCategoryTranslations()
    {
        _categoryTranslations.Clear();
        foreach (var product in _products)
        {
            var category = await CategoryService.GetCategoryTranslation(product.Category, LocalizationService.CurrentLanguage);
            _categoryTranslations[product.Id] = category;
            StateHasChanged();
        }
    }

    private async void OnLanguageChanged()
    {
        await LoadCategoryTranslations();
        StateHasChanged();
    }

    private async void OnCurrencyChanged()
    {
        await LoadPrices();
        StateHasChanged();
        await Task.Delay(50);
        foreach (var product in _products)
        {
            await JSRuntime.InvokeVoidAsync("animatePrice", $"price-{product.Id}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.animatePrice = function(id) {
                    const el = document.getElementById(id);
                    if (el) {
                        el.classList.add('animate');
                        setTimeout(() => el.classList.remove('animate'), 500);
                    }
                }
            ");
        }
    }
} 