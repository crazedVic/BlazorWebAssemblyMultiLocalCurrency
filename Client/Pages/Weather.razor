@page "/weather"
@inject HttpClient Http
@using System.Text.Json.Serialization
@inject NavigationManager Navigation
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<App> Localizer

<PageTitle>@Localizer["Weather"]</PageTitle>

<h1>@Localizer["Weather"]</h1>

<p>@Localizer["Weather data demo"]</p>

@if (forecasts == null)
{
    <p><em>@Localizer["Loading"]</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th style="width: 40%">@Localizer["Date"]</th>
                <th style="width: 120px; text-align: right">@Localizer["Temperature C"]</th>
                <th style="width: 120px; text-align: right">@Localizer["Temperature F"]</th>
                <th style="width: 24px"></th>
                <th>@Localizer["Summary"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td style="width: 40%">@forecast.Date.ToShortDateString()</td>
                    <td style="width: 120px; @(forecast.TemperatureC < 0 ? "color: red" : ""); text-align: right">@forecast.TemperatureC°C</td>
                    <td style="width: 120px; @(forecast.TemperatureF < 0 ? "color: red" : ""); text-align: right">@forecast.TemperatureF°F</td>
                    <td style="width: 24px"></td>
                    <td>@Localizer[forecast.Summary ?? ""]</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var localClient = new HttpClient();
            forecasts = await localClient.GetFromJsonAsync<WeatherForecast[]>(
                $"{Navigation.BaseUri}sample-data/weather.json");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading weather data: {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner error: {ex.InnerException.Message}");
            }
        }
    }

    public class WeatherForecast
    {
        [JsonPropertyName("date")]
        public DateOnly Date { get; set; }

        [JsonPropertyName("temperatureC")]
        public int TemperatureC { get; set; }

        [JsonPropertyName("summary")]
        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC * 9 / 5);
    }
}
